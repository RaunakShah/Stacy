Nonterminals useless in grammar

   if_node
   switch_statement
   if_statement
   selection_statement


Terminals unused in grammar

   IF
   ELSE
   SWITCH
   LOWER_THAN_ELSE


Rules useless in grammar

  208 if_node: labeled_statement
  209        | compound_statement
  210        | expression_statement
  211        | iteration_statement
  212        | jump_statement

  213 switch_statement: SWITCH '(' expression ')'

  214 if_statement: IF '(' expression ')'
  215             | IF '(' expression ')'

  216 selection_statement: if_statement if_node
  217                    | if_statement if_node ELSE if_node
  218                    | switch_statement statement


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | CONSTANT
    3                   | STRING_LITERAL
    4                   | '(' expression ')'

    5 postfix_expression: primary_expression
    6                   | postfix_expression '[' expression ']'
    7                   | postfix_expression '(' ')'
    8                   | postfix_expression '(' argument_expression_list ')'
    9                   | postfix_expression '.' IDENTIFIER
   10                   | postfix_expression PTR_OP IDENTIFIER
   11                   | postfix_expression INC_OP
   12                   | postfix_expression DEC_OP

   13 argument_expression_list: assignment_expression
   14                         | argument_expression_list ',' assignment_expression

   15 unary_expression: postfix_expression
   16                 | INC_OP unary_expression
   17                 | DEC_OP unary_expression
   18                 | unary_operator cast_expression
   19                 | SIZEOF unary_expression
   20                 | SIZEOF '(' type_name ')'

   21 unary_operator: '&'
   22               | '*'
   23               | '+'
   24               | '-'
   25               | '~'
   26               | '!'

   27 cast_expression: unary_expression
   28                | '(' type_name ')' cast_expression

   29 multiplicative_expression: cast_expression
   30                          | multiplicative_expression '*' cast_expression
   31                          | multiplicative_expression '/' cast_expression
   32                          | multiplicative_expression '%' cast_expression

   33 additive_expression: multiplicative_expression
   34                    | additive_expression '+' multiplicative_expression
   35                    | additive_expression '-' multiplicative_expression

   36 shift_expression: additive_expression
   37                 | shift_expression LEFT_OP additive_expression
   38                 | shift_expression RIGHT_OP additive_expression

   39 relational_expression: shift_expression
   40                      | relational_expression '<' shift_expression
   41                      | relational_expression '>' shift_expression
   42                      | relational_expression LE_OP shift_expression
   43                      | relational_expression GE_OP shift_expression

   44 equality_expression: relational_expression
   45                    | equality_expression EQ_OP relational_expression
   46                    | equality_expression NE_OP relational_expression

   47 and_expression: equality_expression
   48               | and_expression '&' equality_expression

   49 exclusive_or_expression: and_expression
   50                        | exclusive_or_expression '^' and_expression

   51 inclusive_or_expression: exclusive_or_expression
   52                        | inclusive_or_expression '|' exclusive_or_expression

   53 logical_and_expression: inclusive_or_expression
   54                       | logical_and_expression AND_OP inclusive_or_expression

   55 logical_or_expression: logical_and_expression
   56                      | logical_or_expression OR_OP logical_and_expression

   57 conditional_expression: logical_or_expression
   58                       | logical_or_expression '?' expression ':' conditional_expression

   59 assignment_expression: conditional_expression
   60                      | unary_expression assignment_operator assignment_expression

   61 assignment_operator: '='
   62                    | MUL_ASSIGN
   63                    | DIV_ASSIGN
   64                    | MOD_ASSIGN
   65                    | ADD_ASSIGN
   66                    | SUB_ASSIGN
   67                    | LEFT_ASSIGN
   68                    | RIGHT_ASSIGN
   69                    | AND_ASSIGN
   70                    | XOR_ASSIGN
   71                    | OR_ASSIGN

   72 expression: assignment_expression
   73           | expression ',' assignment_expression

   74 constant_expression: conditional_expression

   75 declaration: declaration_specifiers ';'
   76            | declaration_specifiers init_declarator_list ';'

   77 declaration_specifiers: storage_class_specifier
   78                       | storage_class_specifier declaration_specifiers
   79                       | type_specifier
   80                       | type_specifier declaration_specifiers
   81                       | type_qualifier
   82                       | type_qualifier declaration_specifiers

   83 init_declarator_list: init_declarator
   84                     | init_declarator_list ',' init_declarator

   85 init_declarator: declarator
   86                | declarator '=' initializer

   87 storage_class_specifier: TYPEDEF
   88                        | EXTERN
   89                        | STATIC
   90                        | AUTO
   91                        | REGISTER

   92 type_specifier: VOID
   93               | CHAR
   94               | SHORT
   95               | INT
   96               | LONG
   97               | FLOAT
   98               | DOUBLE
   99               | SIGNED
  100               | UNSIGNED
  101               | struct_or_union_specifier
  102               | enum_specifier
  103               | TYPE_NAME

  104 struct_or_union_specifier: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | struct_or_union '{' struct_declaration_list '}'
  106                          | struct_or_union IDENTIFIER

  107 struct_or_union: STRUCT
  108                | UNION

  109 struct_declaration_list: struct_declaration
  110                        | struct_declaration_list struct_declaration

  111 struct_declaration: specifier_qualifier_list struct_declarator_list ';'

  112 specifier_qualifier_list: type_specifier specifier_qualifier_list
  113                         | type_specifier
  114                         | type_qualifier specifier_qualifier_list
  115                         | type_qualifier

  116 struct_declarator_list: struct_declarator
  117                       | struct_declarator_list ',' struct_declarator

  118 struct_declarator: declarator
  119                  | ':' constant_expression
  120                  | declarator ':' constant_expression

  121 enum_specifier: ENUM '{' enumerator_list '}'
  122               | ENUM IDENTIFIER '{' enumerator_list '}'
  123               | ENUM IDENTIFIER

  124 enumerator_list: enumerator
  125                | enumerator_list ',' enumerator

  126 enumerator: IDENTIFIER
  127           | IDENTIFIER '=' constant_expression

  128 type_qualifier: CONST
  129               | VOLATILE

  130 declarator: pointer direct_declarator
  131           | direct_declarator

  132 direct_declarator: IDENTIFIER
  133                  | '(' declarator ')'
  134                  | direct_declarator '[' constant_expression ']'
  135                  | direct_declarator '[' ']'
  136                  | direct_declarator '(' parameter_type_list ')'
  137                  | direct_declarator '(' identifier_list ')'
  138                  | direct_declarator '(' ')'

  139 pointer: '*'
  140        | '*' type_qualifier_list
  141        | '*' pointer
  142        | '*' type_qualifier_list pointer

  143 type_qualifier_list: type_qualifier
  144                    | type_qualifier_list type_qualifier

  145 parameter_type_list: parameter_list
  146                    | parameter_list ',' ELLIPSIS

  147 parameter_list: parameter_declaration
  148               | parameter_list ',' parameter_declaration

  149 parameter_declaration: declaration_specifiers declarator
  150                      | declaration_specifiers abstract_declarator
  151                      | declaration_specifiers

  152 identifier_list: IDENTIFIER
  153                | identifier_list ',' IDENTIFIER

  154 type_name: specifier_qualifier_list
  155          | specifier_qualifier_list abstract_declarator

  156 abstract_declarator: pointer
  157                    | direct_abstract_declarator
  158                    | pointer direct_abstract_declarator

  159 direct_abstract_declarator: '(' abstract_declarator ')'
  160                           | '[' ']'
  161                           | '[' constant_expression ']'
  162                           | direct_abstract_declarator '[' ']'
  163                           | direct_abstract_declarator '[' constant_expression ']'
  164                           | '(' ')'
  165                           | '(' parameter_type_list ')'
  166                           | direct_abstract_declarator '(' ')'
  167                           | direct_abstract_declarator '(' parameter_type_list ')'

  168 initializer: assignment_expression
  169            | '{' initializer_list '}'
  170            | '{' initializer_list ',' '}'

  171 initializer_list: initializer
  172                 | initializer_list ',' initializer

  173 statement: labeled_statement
  174          | compound_statement
  175          | expression_statement
  176          | iteration_statement
  177          | jump_statement

  178 labeled_statement: IDENTIFIER ':' statement
  179                  | CASE constant_expression ':' statement
  180                  | DEFAULT ':' statement

  181 compound_statement: '{' '}'
  182                   | '{' statement_list '}'
  183                   | '{' declaration_list '}'
  184                   | '{' declaration_list statement_list '}'

  185 declaration_list: declaration
  186                 | declaration_list declaration

  187 statement_list: statement
  188               | statement_list statement

  189 expression_statement: ';'
  190                     | expression ';'

  191 $@1: /* empty */

  192 iteration_statement: WHILE '(' expression ')' $@1 statement
  193                    | DO statement WHILE '(' expression ')' ';'
  194                    | FOR '(' expression_statement expression_statement ')' statement
  195                    | FOR '(' expression_statement expression_statement expression ')' statement

  196 jump_statement: GOTO IDENTIFIER ';'
  197               | CONTINUE ';'
  198               | BREAK ';'
  199               | RETURN ';'
  200               | RETURN expression ';'

  201 translation_unit: external_declaration

  202 external_declaration: function_definition
  203                     | declaration

  204 function_definition: declaration_specifiers declarator declaration_list compound_statement
  205                    | declaration_specifiers declarator compound_statement
  206                    | declarator declaration_list compound_statement
  207                    | declarator compound_statement


Terminals, with rules where they appear

$end (0) 0
'!' (33) 26
'%' (37) 32
'&' (38) 21 48
'(' (40) 4 7 8 20 28 133 136 137 138 159 164 165 166 167 192 193 194
    195
')' (41) 4 7 8 20 28 133 136 137 138 159 164 165 166 167 192 193 194
    195
'*' (42) 22 30 139 140 141 142
'+' (43) 23 34
',' (44) 14 73 84 117 125 146 148 153 170 172
'-' (45) 24 35
'.' (46) 9
'/' (47) 31
':' (58) 58 119 120 178 179 180
';' (59) 75 76 111 189 190 193 196 197 198 199 200
'<' (60) 40
'=' (61) 61 86 127
'>' (62) 41
'?' (63) 58
'[' (91) 6 134 135 160 161 162 163
']' (93) 6 134 135 160 161 162 163
'^' (94) 50
'{' (123) 104 105 121 122 169 170 181 182 183 184
'|' (124) 52
'}' (125) 104 105 121 122 169 170 181 182 183 184
'~' (126) 25
error (256)
IDENTIFIER (258) 1 9 10 104 106 122 123 126 127 132 152 153 178 196
CONSTANT (259) 2
STRING_LITERAL (260) 3
SIZEOF (261) 19 20
PTR_OP (262) 10
INC_OP (263) 11 16
DEC_OP (264) 12 17
LEFT_OP (265) 37
RIGHT_OP (266) 38
LE_OP (267) 42
GE_OP (268) 43
EQ_OP (269) 45
NE_OP (270) 46
AND_OP (271) 54
OR_OP (272) 56
MUL_ASSIGN (273) 62
DIV_ASSIGN (274) 63
MOD_ASSIGN (275) 64
ADD_ASSIGN (276) 65
SUB_ASSIGN (277) 66
LEFT_ASSIGN (278) 67
RIGHT_ASSIGN (279) 68
AND_ASSIGN (280) 69
XOR_ASSIGN (281) 70
OR_ASSIGN (282) 71
TYPE_NAME (283) 103
TYPEDEF (284) 87
EXTERN (285) 88
STATIC (286) 89
AUTO (287) 90
REGISTER (288) 91
CHAR (289) 93
SHORT (290) 94
INT (291) 95
LONG (292) 96
SIGNED (293) 99
UNSIGNED (294) 100
FLOAT (295) 97
DOUBLE (296) 98
CONST (297) 128
VOLATILE (298) 129
VOID (299) 92
STRUCT (300) 107
UNION (301) 108
ENUM (302) 121 122 123
ELLIPSIS (303) 146
CASE (304) 179
DEFAULT (305) 180
IF (306)
ELSE (307)
SWITCH (308)
WHILE (309) 192 193
DO (310) 193
FOR (311) 194 195
GOTO (312) 196
CONTINUE (313) 197
BREAK (314) 198
RETURN (315) 199 200
LOWER_THAN_ELSE (316)


Nonterminals, with rules where they appear

$accept (86)
    on left: 0
primary_expression (87)
    on left: 1 2 3 4, on right: 5
postfix_expression (88)
    on left: 5 6 7 8 9 10 11 12, on right: 6 7 8 9 10 11 12 15
argument_expression_list (89)
    on left: 13 14, on right: 8 14
unary_expression (90)
    on left: 15 16 17 18 19 20, on right: 16 17 19 27 60
unary_operator (91)
    on left: 21 22 23 24 25 26, on right: 18
cast_expression (92)
    on left: 27 28, on right: 18 28 29 30 31 32
multiplicative_expression (93)
    on left: 29 30 31 32, on right: 30 31 32 33 34 35
additive_expression (94)
    on left: 33 34 35, on right: 34 35 36 37 38
shift_expression (95)
    on left: 36 37 38, on right: 37 38 39 40 41 42 43
relational_expression (96)
    on left: 39 40 41 42 43, on right: 40 41 42 43 44 45 46
equality_expression (97)
    on left: 44 45 46, on right: 45 46 47 48
and_expression (98)
    on left: 47 48, on right: 48 49 50
exclusive_or_expression (99)
    on left: 49 50, on right: 50 51 52
inclusive_or_expression (100)
    on left: 51 52, on right: 52 53 54
logical_and_expression (101)
    on left: 53 54, on right: 54 55 56
logical_or_expression (102)
    on left: 55 56, on right: 56 57 58
conditional_expression (103)
    on left: 57 58, on right: 58 59 74
assignment_expression (104)
    on left: 59 60, on right: 13 14 60 72 73 168
assignment_operator (105)
    on left: 61 62 63 64 65 66 67 68 69 70 71, on right: 60
expression (106)
    on left: 72 73, on right: 4 6 58 73 190 192 193 195 200
constant_expression (107)
    on left: 74, on right: 119 120 127 134 161 163 179
declaration (108)
    on left: 75 76, on right: 185 186 203
declaration_specifiers (109)
    on left: 77 78 79 80 81 82, on right: 75 76 78 80 82 149 150 151
    204 205
init_declarator_list (110)
    on left: 83 84, on right: 76 84
init_declarator (111)
    on left: 85 86, on right: 83 84
storage_class_specifier (112)
    on left: 87 88 89 90 91, on right: 77 78
type_specifier (113)
    on left: 92 93 94 95 96 97 98 99 100 101 102 103, on right: 79
    80 112 113
struct_or_union_specifier (114)
    on left: 104 105 106, on right: 101
struct_or_union (115)
    on left: 107 108, on right: 104 105 106
struct_declaration_list (116)
    on left: 109 110, on right: 104 105 110
struct_declaration (117)
    on left: 111, on right: 109 110
specifier_qualifier_list (118)
    on left: 112 113 114 115, on right: 111 112 114 154 155
struct_declarator_list (119)
    on left: 116 117, on right: 111 117
struct_declarator (120)
    on left: 118 119 120, on right: 116 117
enum_specifier (121)
    on left: 121 122 123, on right: 102
enumerator_list (122)
    on left: 124 125, on right: 121 122 125
enumerator (123)
    on left: 126 127, on right: 124 125
type_qualifier (124)
    on left: 128 129, on right: 81 82 114 115 143 144
declarator (125)
    on left: 130 131, on right: 85 86 118 120 133 149 204 205 206 207
direct_declarator (126)
    on left: 132 133 134 135 136 137 138, on right: 130 131 134 135
    136 137 138
pointer (127)
    on left: 139 140 141 142, on right: 130 141 142 156 158
type_qualifier_list (128)
    on left: 143 144, on right: 140 142 144
parameter_type_list (129)
    on left: 145 146, on right: 136 165 167
parameter_list (130)
    on left: 147 148, on right: 145 146 148
parameter_declaration (131)
    on left: 149 150 151, on right: 147 148
identifier_list (132)
    on left: 152 153, on right: 137 153
type_name (133)
    on left: 154 155, on right: 20 28
abstract_declarator (134)
    on left: 156 157 158, on right: 150 155 159
direct_abstract_declarator (135)
    on left: 159 160 161 162 163 164 165 166 167, on right: 157 158
    162 163 166 167
initializer (136)
    on left: 168 169 170, on right: 86 171 172
initializer_list (137)
    on left: 171 172, on right: 169 170 172
statement (138)
    on left: 173 174 175 176 177, on right: 178 179 180 187 188 192
    193 194 195
labeled_statement (139)
    on left: 178 179 180, on right: 173
compound_statement (140)
    on left: 181 182 183 184, on right: 174 204 205 206 207
declaration_list (141)
    on left: 185 186, on right: 183 184 186 204 206
statement_list (142)
    on left: 187 188, on right: 182 184 188
expression_statement (143)
    on left: 189 190, on right: 175 194 195
iteration_statement (144)
    on left: 192 193 194 195, on right: 176
$@1 (145)
    on left: 191, on right: 192
jump_statement (146)
    on left: 196 197 198 199 200, on right: 177
translation_unit (147)
    on left: 201, on right: 0
external_declaration (148)
    on left: 202 203, on right: 201
function_definition (149)
    on left: 204 205 206 207, on right: 202


State 0

    0 $accept: . translation_unit $end
   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  201 translation_unit: . external_declaration
  202 external_declaration: . function_definition
  203                     | . declaration
  204 function_definition: . declaration_specifiers declarator declaration_list compound_statement
  205                    | . declaration_specifiers declarator compound_statement
  206                    | . declarator declaration_list compound_statement
  207                    | . declarator compound_statement

    IDENTIFIER  shift, and go to state 1
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    declaration                go to state 24
    declaration_specifiers     go to state 25
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    declarator                 go to state 32
    direct_declarator          go to state 33
    pointer                    go to state 34
    translation_unit           go to state 35
    external_declaration       go to state 36
    function_definition        go to state 37


State 1

  132 direct_declarator: IDENTIFIER .

    $default  reduce using rule 132 (direct_declarator)


State 2

  103 type_specifier: TYPE_NAME .

    $default  reduce using rule 103 (type_specifier)


State 3

   87 storage_class_specifier: TYPEDEF .

    $default  reduce using rule 87 (storage_class_specifier)


State 4

   88 storage_class_specifier: EXTERN .

    $default  reduce using rule 88 (storage_class_specifier)


State 5

   89 storage_class_specifier: STATIC .

    $default  reduce using rule 89 (storage_class_specifier)


State 6

   90 storage_class_specifier: AUTO .

    $default  reduce using rule 90 (storage_class_specifier)


State 7

   91 storage_class_specifier: REGISTER .

    $default  reduce using rule 91 (storage_class_specifier)


State 8

   93 type_specifier: CHAR .

    $default  reduce using rule 93 (type_specifier)


State 9

   94 type_specifier: SHORT .

    $default  reduce using rule 94 (type_specifier)


State 10

   95 type_specifier: INT .

    $default  reduce using rule 95 (type_specifier)


State 11

   96 type_specifier: LONG .

    $default  reduce using rule 96 (type_specifier)


State 12

   99 type_specifier: SIGNED .

    $default  reduce using rule 99 (type_specifier)


State 13

  100 type_specifier: UNSIGNED .

    $default  reduce using rule 100 (type_specifier)


State 14

   97 type_specifier: FLOAT .

    $default  reduce using rule 97 (type_specifier)


State 15

   98 type_specifier: DOUBLE .

    $default  reduce using rule 98 (type_specifier)


State 16

  128 type_qualifier: CONST .

    $default  reduce using rule 128 (type_qualifier)


State 17

  129 type_qualifier: VOLATILE .

    $default  reduce using rule 129 (type_qualifier)


State 18

   92 type_specifier: VOID .

    $default  reduce using rule 92 (type_specifier)


State 19

  107 struct_or_union: STRUCT .

    $default  reduce using rule 107 (struct_or_union)


State 20

  108 struct_or_union: UNION .

    $default  reduce using rule 108 (struct_or_union)


State 21

  121 enum_specifier: ENUM . '{' enumerator_list '}'
  122               | ENUM . IDENTIFIER '{' enumerator_list '}'
  123               | ENUM . IDENTIFIER

    IDENTIFIER  shift, and go to state 38
    '{'         shift, and go to state 39


State 22

  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  133                  | '(' . declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    declarator         go to state 40
    direct_declarator  go to state 33
    pointer            go to state 34


State 23

  128 type_qualifier: . CONST
  129               | . VOLATILE
  139 pointer: . '*'
  139        | '*' .  [IDENTIFIER, '(', ')', '[', ',']
  140        | . '*' type_qualifier_list
  140        | '*' . type_qualifier_list
  141        | . '*' pointer
  141        | '*' . pointer
  142        | . '*' type_qualifier_list pointer
  142        | '*' . type_qualifier_list pointer
  143 type_qualifier_list: . type_qualifier
  144                    | . type_qualifier_list type_qualifier

    CONST     shift, and go to state 16
    VOLATILE  shift, and go to state 17
    '*'       shift, and go to state 23

    $default  reduce using rule 139 (pointer)

    type_qualifier       go to state 41
    pointer              go to state 42
    type_qualifier_list  go to state 43


State 24

  203 external_declaration: declaration .

    $default  reduce using rule 203 (external_declaration)


State 25

   75 declaration: declaration_specifiers . ';'
   76            | declaration_specifiers . init_declarator_list ';'
   83 init_declarator_list: . init_declarator
   84                     | . init_declarator_list ',' init_declarator
   85 init_declarator: . declarator
   86                | . declarator '=' initializer
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  204 function_definition: declaration_specifiers . declarator declaration_list compound_statement
  205                    | declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ';'         shift, and go to state 44

    init_declarator_list  go to state 45
    init_declarator       go to state 46
    declarator            go to state 47
    direct_declarator     go to state 33
    pointer               go to state 34


State 26

   77 declaration_specifiers: . storage_class_specifier
   77                       | storage_class_specifier .  [IDENTIFIER, '(', ')', '[', ',', '*', ';']
   78                       | . storage_class_specifier declaration_specifiers
   78                       | storage_class_specifier . declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 77 (declaration_specifiers)

    declaration_specifiers     go to state 48
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31


State 27

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   79                       | type_specifier .  [IDENTIFIER, '(', ')', '[', ',', '*', ';']
   80                       | . type_specifier declaration_specifiers
   80                       | type_specifier . declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 79 (declaration_specifiers)

    declaration_specifiers     go to state 49
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31


State 28

  101 type_specifier: struct_or_union_specifier .

    $default  reduce using rule 101 (type_specifier)


State 29

  104 struct_or_union_specifier: struct_or_union . IDENTIFIER '{' struct_declaration_list '}'
  105                          | struct_or_union . '{' struct_declaration_list '}'
  106                          | struct_or_union . IDENTIFIER

    IDENTIFIER  shift, and go to state 50
    '{'         shift, and go to state 51


State 30

  102 type_specifier: enum_specifier .

    $default  reduce using rule 102 (type_specifier)


State 31

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   81                       | type_qualifier .  [IDENTIFIER, '(', ')', '[', ',', '*', ';']
   82                       | . type_qualifier declaration_specifiers
   82                       | type_qualifier . declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 81 (declaration_specifiers)

    declaration_specifiers     go to state 52
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31


State 32

   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  185 declaration_list: . declaration
  186                 | . declaration_list declaration
  206 function_definition: declarator . declaration_list compound_statement
  207                    | declarator . compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '{'        shift, and go to state 53

    declaration                go to state 54
    declaration_specifiers     go to state 55
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    compound_statement         go to state 56
    declaration_list           go to state 57


State 33

  131 declarator: direct_declarator .  [TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ')', ',', ':', '=', ';', '{']
  134 direct_declarator: direct_declarator . '[' constant_expression ']'
  135                  | direct_declarator . '[' ']'
  136                  | direct_declarator . '(' parameter_type_list ')'
  137                  | direct_declarator . '(' identifier_list ')'
  138                  | direct_declarator . '(' ')'

    '('  shift, and go to state 58
    '['  shift, and go to state 59

    $default  reduce using rule 131 (declarator)


State 34

  130 declarator: pointer . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22

    direct_declarator  go to state 60


State 35

    0 $accept: translation_unit . $end

    $end  shift, and go to state 61


State 36

  201 translation_unit: external_declaration .

    $default  reduce using rule 201 (translation_unit)


State 37

  202 external_declaration: function_definition .

    $default  reduce using rule 202 (external_declaration)


State 38

  122 enum_specifier: ENUM IDENTIFIER . '{' enumerator_list '}'
  123               | ENUM IDENTIFIER .  [IDENTIFIER, TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, '(', ')', '[', ',', '*', ':', ';']

    '{'  shift, and go to state 62

    $default  reduce using rule 123 (enum_specifier)


State 39

  121 enum_specifier: ENUM '{' . enumerator_list '}'
  124 enumerator_list: . enumerator
  125                | . enumerator_list ',' enumerator
  126 enumerator: . IDENTIFIER
  127           | . IDENTIFIER '=' constant_expression

    IDENTIFIER  shift, and go to state 63

    enumerator_list  go to state 64
    enumerator       go to state 65


State 40

  133 direct_declarator: '(' declarator . ')'

    ')'  shift, and go to state 66


State 41

  143 type_qualifier_list: type_qualifier .

    $default  reduce using rule 143 (type_qualifier_list)


State 42

  141 pointer: '*' pointer .

    $default  reduce using rule 141 (pointer)


State 43

  128 type_qualifier: . CONST
  129               | . VOLATILE
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  140        | '*' type_qualifier_list .  [IDENTIFIER, '(', ')', '[', ',']
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  142        | '*' type_qualifier_list . pointer
  144 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 16
    VOLATILE  shift, and go to state 17
    '*'       shift, and go to state 23

    $default  reduce using rule 140 (pointer)

    type_qualifier  go to state 67
    pointer         go to state 68


State 44

   75 declaration: declaration_specifiers ';' .

    $default  reduce using rule 75 (declaration)


State 45

   76 declaration: declaration_specifiers init_declarator_list . ';'
   84 init_declarator_list: init_declarator_list . ',' init_declarator

    ','  shift, and go to state 69
    ';'  shift, and go to state 70


State 46

   83 init_declarator_list: init_declarator .

    $default  reduce using rule 83 (init_declarator_list)


State 47

   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   85 init_declarator: declarator .  [',', ';']
   86                | declarator . '=' initializer
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  185 declaration_list: . declaration
  186                 | . declaration_list declaration
  204 function_definition: declaration_specifiers declarator . declaration_list compound_statement
  205                    | declaration_specifiers declarator . compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '='        shift, and go to state 71
    '{'        shift, and go to state 53

    $default  reduce using rule 85 (init_declarator)

    declaration                go to state 54
    declaration_specifiers     go to state 55
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    compound_statement         go to state 72
    declaration_list           go to state 73


State 48

   78 declaration_specifiers: storage_class_specifier declaration_specifiers .

    $default  reduce using rule 78 (declaration_specifiers)


State 49

   80 declaration_specifiers: type_specifier declaration_specifiers .

    $default  reduce using rule 80 (declaration_specifiers)


State 50

  104 struct_or_union_specifier: struct_or_union IDENTIFIER . '{' struct_declaration_list '}'
  106                          | struct_or_union IDENTIFIER .  [IDENTIFIER, TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, '(', ')', '[', ',', '*', ':', ';']

    '{'  shift, and go to state 74

    $default  reduce using rule 106 (struct_or_union_specifier)


State 51

   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  105                          | struct_or_union '{' . struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  109 struct_declaration_list: . struct_declaration
  110                        | . struct_declaration_list struct_declaration
  111 struct_declaration: . specifier_qualifier_list struct_declarator_list ';'
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration_list    go to state 76
    struct_declaration         go to state 77
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 52

   82 declaration_specifiers: type_qualifier declaration_specifiers .

    $default  reduce using rule 82 (declaration_specifiers)


State 53

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  181                   | '{' . '}'
  182                   | . '{' statement_list '}'
  182                   | '{' . statement_list '}'
  183                   | . '{' declaration_list '}'
  183                   | '{' . declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  184                   | '{' . declaration_list statement_list '}'
  185 declaration_list: . declaration
  186                 | . declaration_list declaration
  187 statement_list: . statement
  188               | . statement_list statement
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    TYPE_NAME       shift, and go to state 2
    TYPEDEF         shift, and go to state 3
    EXTERN          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    REGISTER        shift, and go to state 7
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53
    '}'             shift, and go to state 103

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    declaration                go to state 54
    declaration_specifiers     go to state 55
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    statement                  go to state 122
    labeled_statement          go to state 123
    compound_statement         go to state 124
    declaration_list           go to state 125
    statement_list             go to state 126
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 54

  185 declaration_list: declaration .

    $default  reduce using rule 185 (declaration_list)


State 55

   75 declaration: declaration_specifiers . ';'
   76            | declaration_specifiers . init_declarator_list ';'
   83 init_declarator_list: . init_declarator
   84                     | . init_declarator_list ',' init_declarator
   85 init_declarator: . declarator
   86                | . declarator '=' initializer
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ';'         shift, and go to state 44

    init_declarator_list  go to state 45
    init_declarator       go to state 46
    declarator            go to state 130
    direct_declarator     go to state 33
    pointer               go to state 34


State 56

  207 function_definition: declarator compound_statement .

    $default  reduce using rule 207 (function_definition)


State 57

   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  186 declaration_list: declaration_list . declaration
  206 function_definition: declarator declaration_list . compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '{'        shift, and go to state 53

    declaration                go to state 131
    declaration_specifiers     go to state 55
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    compound_statement         go to state 132


State 58

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  136 direct_declarator: direct_declarator '(' . parameter_type_list ')'
  137                  | direct_declarator '(' . identifier_list ')'
  138                  | direct_declarator '(' . ')'
  145 parameter_type_list: . parameter_list
  146                    | . parameter_list ',' ELLIPSIS
  147 parameter_list: . parameter_declaration
  148               | . parameter_list ',' parameter_declaration
  149 parameter_declaration: . declaration_specifiers declarator
  150                      | . declaration_specifiers abstract_declarator
  151                      | . declaration_specifiers
  152 identifier_list: . IDENTIFIER
  153                | . identifier_list ',' IDENTIFIER

    IDENTIFIER  shift, and go to state 133
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    ')'         shift, and go to state 134

    declaration_specifiers     go to state 135
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    parameter_type_list        go to state 136
    parameter_list             go to state 137
    parameter_declaration      go to state 138
    identifier_list            go to state 139


State 59

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  134 direct_declarator: direct_declarator '[' . constant_expression ']'
  135                  | direct_declarator '[' . ']'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    ']'             shift, and go to state 141
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 144


State 60

  130 declarator: pointer direct_declarator .  [TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ')', ',', ':', '=', ';', '{']
  134 direct_declarator: direct_declarator . '[' constant_expression ']'
  135                  | direct_declarator . '[' ']'
  136                  | direct_declarator . '(' parameter_type_list ')'
  137                  | direct_declarator . '(' identifier_list ')'
  138                  | direct_declarator . '(' ')'

    '('  shift, and go to state 58
    '['  shift, and go to state 59

    $default  reduce using rule 130 (declarator)


State 61

    0 $accept: translation_unit $end .

    $default  accept


State 62

  122 enum_specifier: ENUM IDENTIFIER '{' . enumerator_list '}'
  124 enumerator_list: . enumerator
  125                | . enumerator_list ',' enumerator
  126 enumerator: . IDENTIFIER
  127           | . IDENTIFIER '=' constant_expression

    IDENTIFIER  shift, and go to state 63

    enumerator_list  go to state 145
    enumerator       go to state 65


State 63

  126 enumerator: IDENTIFIER .  [',', '}']
  127           | IDENTIFIER . '=' constant_expression

    '='  shift, and go to state 146

    $default  reduce using rule 126 (enumerator)


State 64

  121 enum_specifier: ENUM '{' enumerator_list . '}'
  125 enumerator_list: enumerator_list . ',' enumerator

    ','  shift, and go to state 147
    '}'  shift, and go to state 148


State 65

  124 enumerator_list: enumerator .

    $default  reduce using rule 124 (enumerator_list)


State 66

  133 direct_declarator: '(' declarator ')' .

    $default  reduce using rule 133 (direct_declarator)


State 67

  144 type_qualifier_list: type_qualifier_list type_qualifier .

    $default  reduce using rule 144 (type_qualifier_list)


State 68

  142 pointer: '*' type_qualifier_list pointer .

    $default  reduce using rule 142 (pointer)


State 69

   84 init_declarator_list: init_declarator_list ',' . init_declarator
   85 init_declarator: . declarator
   86                | . declarator '=' initializer
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    init_declarator    go to state 149
    declarator         go to state 130
    direct_declarator  go to state 33
    pointer            go to state 34


State 70

   76 declaration: declaration_specifiers init_declarator_list ';' .

    $default  reduce using rule 76 (declaration)


State 71

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   86 init_declarator: declarator '=' . initializer
  168 initializer: . assignment_expression
  169            | . '{' initializer_list '}'
  170            | . '{' initializer_list ',' '}'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    '{'             shift, and go to state 150

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 151
    initializer                go to state 152


State 72

  205 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 205 (function_definition)


State 73

   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  186 declaration_list: declaration_list . declaration
  204 function_definition: declaration_specifiers declarator declaration_list . compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '{'        shift, and go to state 53

    declaration                go to state 131
    declaration_specifiers     go to state 55
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    compound_statement         go to state 153


State 74

   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  104                          | struct_or_union IDENTIFIER '{' . struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  109 struct_declaration_list: . struct_declaration
  110                        | . struct_declaration_list struct_declaration
  111 struct_declaration: . specifier_qualifier_list struct_declarator_list ';'
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration_list    go to state 154
    struct_declaration         go to state 77
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 75

   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  112                         | type_specifier . specifier_qualifier_list
  113                         | . type_specifier
  113                         | type_specifier .  [IDENTIFIER, '(', ')', '[', '*', ':']
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 113 (specifier_qualifier_list)

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 155
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 76

   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  105                          | struct_or_union '{' struct_declaration_list . '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  110 struct_declaration_list: struct_declaration_list . struct_declaration
  111 struct_declaration: . specifier_qualifier_list struct_declarator_list ';'
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '}'        shift, and go to state 156

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration         go to state 157
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 77

  109 struct_declaration_list: struct_declaration .

    $default  reduce using rule 109 (struct_declaration_list)


State 78

  111 struct_declaration: specifier_qualifier_list . struct_declarator_list ';'
  116 struct_declarator_list: . struct_declarator
  117                       | . struct_declarator_list ',' struct_declarator
  118 struct_declarator: . declarator
  119                  | . ':' constant_expression
  120                  | . declarator ':' constant_expression
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ':'         shift, and go to state 158

    struct_declarator_list  go to state 159
    struct_declarator       go to state 160
    declarator              go to state 161
    direct_declarator       go to state 33
    pointer                 go to state 34


State 79

   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  114                         | type_qualifier . specifier_qualifier_list
  115                         | . type_qualifier
  115                         | type_qualifier .  [IDENTIFIER, '(', ')', '[', '*', ':']
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 115 (specifier_qualifier_list)

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 162
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 80

    1 primary_expression: IDENTIFIER .  [PTR_OP, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, '(', '[', '.', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', '=', ';']
  178 labeled_statement: IDENTIFIER . ':' statement

    ':'  shift, and go to state 163

    $default  reduce using rule 1 (primary_expression)


State 81

    2 primary_expression: CONSTANT .

    $default  reduce using rule 2 (primary_expression)


State 82

    3 primary_expression: STRING_LITERAL .

    $default  reduce using rule 3 (primary_expression)


State 83

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   19                 | SIZEOF . unary_expression
   20                 | . SIZEOF '(' type_name ')'
   20                 | SIZEOF . '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 164
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 165
    unary_operator      go to state 107


State 84

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   16                 | INC_OP . unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 166
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 167
    unary_operator      go to state 107


State 85

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   17                 | DEC_OP . unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 166
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 168
    unary_operator      go to state 107


State 86

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  179 labeled_statement: CASE . constant_expression ':' statement

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 169


State 87

  180 labeled_statement: DEFAULT . ':' statement

    ':'  shift, and go to state 170


State 88

  192 iteration_statement: WHILE . '(' expression ')' $@1 statement

    '('  shift, and go to state 171


State 89

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  193                    | DO . statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 172
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 90

  194 iteration_statement: FOR . '(' expression_statement expression_statement ')' statement
  195                    | FOR . '(' expression_statement expression_statement expression ')' statement

    '('  shift, and go to state 173


State 91

  196 jump_statement: GOTO . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 174


State 92

  197 jump_statement: CONTINUE . ';'

    ';'  shift, and go to state 175


State 93

  198 jump_statement: BREAK . ';'

    ';'  shift, and go to state 176


State 94

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  199 jump_statement: RETURN . ';'
  200               | RETURN . expression ';'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 177

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 178


State 95

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    4                   | '(' . expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   28                | '(' . type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  154 type_name: . specifier_qualifier_list
  155          | . specifier_qualifier_list abstract_declarator

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    TYPE_NAME       shift, and go to state 2
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 179
    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 180
    enum_specifier             go to state 30
    type_qualifier             go to state 79
    type_name                  go to state 181


State 96

   21 unary_operator: '&' .

    $default  reduce using rule 21 (unary_operator)


State 97

   22 unary_operator: '*' .

    $default  reduce using rule 22 (unary_operator)


State 98

   23 unary_operator: '+' .

    $default  reduce using rule 23 (unary_operator)


State 99

   24 unary_operator: '-' .

    $default  reduce using rule 24 (unary_operator)


State 100

   25 unary_operator: '~' .

    $default  reduce using rule 25 (unary_operator)


State 101

   26 unary_operator: '!' .

    $default  reduce using rule 26 (unary_operator)


State 102

  189 expression_statement: ';' .

    $default  reduce using rule 189 (expression_statement)


State 103

  181 compound_statement: '{' '}' .

    $default  reduce using rule 181 (compound_statement)


State 104

    5 postfix_expression: primary_expression .

    $default  reduce using rule 5 (postfix_expression)


State 105

    6 postfix_expression: postfix_expression . '[' expression ']'
    7                   | postfix_expression . '(' ')'
    8                   | postfix_expression . '(' argument_expression_list ')'
    9                   | postfix_expression . '.' IDENTIFIER
   10                   | postfix_expression . PTR_OP IDENTIFIER
   11                   | postfix_expression . INC_OP
   12                   | postfix_expression . DEC_OP
   15 unary_expression: postfix_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, ')', ']', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', ':', '=', ';', '}']

    PTR_OP  shift, and go to state 182
    INC_OP  shift, and go to state 183
    DEC_OP  shift, and go to state 184
    '('     shift, and go to state 185
    '['     shift, and go to state 186
    '.'     shift, and go to state 187

    $default  reduce using rule 15 (unary_expression)


State 106

   27 cast_expression: unary_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', ':', ';', '}']
   60 assignment_expression: unary_expression . assignment_operator assignment_expression
   61 assignment_operator: . '='
   62                    | . MUL_ASSIGN
   63                    | . DIV_ASSIGN
   64                    | . MOD_ASSIGN
   65                    | . ADD_ASSIGN
   66                    | . SUB_ASSIGN
   67                    | . LEFT_ASSIGN
   68                    | . RIGHT_ASSIGN
   69                    | . AND_ASSIGN
   70                    | . XOR_ASSIGN
   71                    | . OR_ASSIGN

    MUL_ASSIGN    shift, and go to state 188
    DIV_ASSIGN    shift, and go to state 189
    MOD_ASSIGN    shift, and go to state 190
    ADD_ASSIGN    shift, and go to state 191
    SUB_ASSIGN    shift, and go to state 192
    LEFT_ASSIGN   shift, and go to state 193
    RIGHT_ASSIGN  shift, and go to state 194
    AND_ASSIGN    shift, and go to state 195
    XOR_ASSIGN    shift, and go to state 196
    OR_ASSIGN     shift, and go to state 197
    '='           shift, and go to state 198

    $default  reduce using rule 27 (cast_expression)

    assignment_operator  go to state 199


State 107

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   18                 | unary_operator . cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 142
    unary_operator      go to state 107
    cast_expression     go to state 200


State 108

   29 multiplicative_expression: cast_expression .

    $default  reduce using rule 29 (multiplicative_expression)


State 109

   30 multiplicative_expression: multiplicative_expression . '*' cast_expression
   31                          | multiplicative_expression . '/' cast_expression
   32                          | multiplicative_expression . '%' cast_expression
   33 additive_expression: multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':', ';', '}']

    '*'  shift, and go to state 201
    '/'  shift, and go to state 202
    '%'  shift, and go to state 203

    $default  reduce using rule 33 (additive_expression)


State 110

   34 additive_expression: additive_expression . '+' multiplicative_expression
   35                    | additive_expression . '-' multiplicative_expression
   36 shift_expression: additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    '+'  shift, and go to state 204
    '-'  shift, and go to state 205

    $default  reduce using rule 36 (shift_expression)


State 111

   37 shift_expression: shift_expression . LEFT_OP additive_expression
   38                 | shift_expression . RIGHT_OP additive_expression
   39 relational_expression: shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 206
    RIGHT_OP  shift, and go to state 207

    $default  reduce using rule 39 (relational_expression)


State 112

   40 relational_expression: relational_expression . '<' shift_expression
   41                      | relational_expression . '>' shift_expression
   42                      | relational_expression . LE_OP shift_expression
   43                      | relational_expression . GE_OP shift_expression
   44 equality_expression: relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    LE_OP  shift, and go to state 208
    GE_OP  shift, and go to state 209
    '<'    shift, and go to state 210
    '>'    shift, and go to state 211

    $default  reduce using rule 44 (equality_expression)


State 113

   45 equality_expression: equality_expression . EQ_OP relational_expression
   46                    | equality_expression . NE_OP relational_expression
   47 and_expression: equality_expression .  [AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    EQ_OP  shift, and go to state 212
    NE_OP  shift, and go to state 213

    $default  reduce using rule 47 (and_expression)


State 114

   48 and_expression: and_expression . '&' equality_expression
   49 exclusive_or_expression: and_expression .  [AND_OP, OR_OP, ')', ']', ',', '^', '|', '?', ':', ';', '}']

    '&'  shift, and go to state 214

    $default  reduce using rule 49 (exclusive_or_expression)


State 115

   50 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   51 inclusive_or_expression: exclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', '|', '?', ':', ';', '}']

    '^'  shift, and go to state 215

    $default  reduce using rule 51 (inclusive_or_expression)


State 116

   52 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   53 logical_and_expression: inclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', '?', ':', ';', '}']

    '|'  shift, and go to state 216

    $default  reduce using rule 53 (logical_and_expression)


State 117

   54 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   55 logical_or_expression: logical_and_expression .  [OR_OP, ')', ']', ',', '?', ':', ';', '}']

    AND_OP  shift, and go to state 217

    $default  reduce using rule 55 (logical_or_expression)


State 118

   56 logical_or_expression: logical_or_expression . OR_OP logical_and_expression
   57 conditional_expression: logical_or_expression .  [')', ']', ',', ':', ';', '}']
   58                       | logical_or_expression . '?' expression ':' conditional_expression

    OR_OP  shift, and go to state 218
    '?'    shift, and go to state 219

    $default  reduce using rule 57 (conditional_expression)


State 119

   59 assignment_expression: conditional_expression .

    $default  reduce using rule 59 (assignment_expression)


State 120

   72 expression: assignment_expression .

    $default  reduce using rule 72 (expression)


State 121

   73 expression: expression . ',' assignment_expression
  190 expression_statement: expression . ';'

    ','  shift, and go to state 220
    ';'  shift, and go to state 221


State 122

  187 statement_list: statement .

    $default  reduce using rule 187 (statement_list)


State 123

  173 statement: labeled_statement .

    $default  reduce using rule 173 (statement)


State 124

  174 statement: compound_statement .

    $default  reduce using rule 174 (statement)


State 125

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
   75 declaration: . declaration_specifiers ';'
   76            | . declaration_specifiers init_declarator_list ';'
   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  183                   | '{' declaration_list . '}'
  184                   | . '{' declaration_list statement_list '}'
  184                   | '{' declaration_list . statement_list '}'
  186 declaration_list: declaration_list . declaration
  187 statement_list: . statement
  188               | . statement_list statement
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    TYPE_NAME       shift, and go to state 2
    TYPEDEF         shift, and go to state 3
    EXTERN          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    REGISTER        shift, and go to state 7
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53
    '}'             shift, and go to state 222

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    declaration                go to state 131
    declaration_specifiers     go to state 55
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    statement                  go to state 122
    labeled_statement          go to state 123
    compound_statement         go to state 124
    statement_list             go to state 223
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 126

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  182                   | '{' statement_list . '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  188 statement_list: statement_list . statement
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53
    '}'             shift, and go to state 224

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 225
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 127

  175 statement: expression_statement .

    $default  reduce using rule 175 (statement)


State 128

  176 statement: iteration_statement .

    $default  reduce using rule 176 (statement)


State 129

  177 statement: jump_statement .

    $default  reduce using rule 177 (statement)


State 130

   85 init_declarator: declarator .  [',', ';']
   86                | declarator . '=' initializer

    '='  shift, and go to state 71

    $default  reduce using rule 85 (init_declarator)


State 131

  186 declaration_list: declaration_list declaration .

    $default  reduce using rule 186 (declaration_list)


State 132

  206 function_definition: declarator declaration_list compound_statement .

    $default  reduce using rule 206 (function_definition)


State 133

  152 identifier_list: IDENTIFIER .

    $default  reduce using rule 152 (identifier_list)


State 134

  138 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 138 (direct_declarator)


State 135

  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  149 parameter_declaration: declaration_specifiers . declarator
  150                      | declaration_specifiers . abstract_declarator
  151                      | declaration_specifiers .  [')', ',']
  156 abstract_declarator: . pointer
  157                    | . direct_abstract_declarator
  158                    | . pointer direct_abstract_declarator
  159 direct_abstract_declarator: . '(' abstract_declarator ')'
  160                           | . '[' ']'
  161                           | . '[' constant_expression ']'
  162                           | . direct_abstract_declarator '[' ']'
  163                           | . direct_abstract_declarator '[' constant_expression ']'
  164                           | . '(' ')'
  165                           | . '(' parameter_type_list ')'
  166                           | . direct_abstract_declarator '(' ')'
  167                           | . direct_abstract_declarator '(' parameter_type_list ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 226
    '['         shift, and go to state 227
    '*'         shift, and go to state 23

    $default  reduce using rule 151 (parameter_declaration)

    declarator                  go to state 228
    direct_declarator           go to state 33
    pointer                     go to state 229
    abstract_declarator         go to state 230
    direct_abstract_declarator  go to state 231


State 136

  136 direct_declarator: direct_declarator '(' parameter_type_list . ')'

    ')'  shift, and go to state 232


State 137

  145 parameter_type_list: parameter_list .  [')']
  146                    | parameter_list . ',' ELLIPSIS
  148 parameter_list: parameter_list . ',' parameter_declaration

    ','  shift, and go to state 233

    $default  reduce using rule 145 (parameter_type_list)


State 138

  147 parameter_list: parameter_declaration .

    $default  reduce using rule 147 (parameter_list)


State 139

  137 direct_declarator: direct_declarator '(' identifier_list . ')'
  153 identifier_list: identifier_list . ',' IDENTIFIER

    ')'  shift, and go to state 234
    ','  shift, and go to state 235


State 140

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


State 141

  135 direct_declarator: direct_declarator '[' ']' .

    $default  reduce using rule 135 (direct_declarator)


State 142

   27 cast_expression: unary_expression .

    $default  reduce using rule 27 (cast_expression)


State 143

   74 constant_expression: conditional_expression .

    $default  reduce using rule 74 (constant_expression)


State 144

  134 direct_declarator: direct_declarator '[' constant_expression . ']'

    ']'  shift, and go to state 236


State 145

  122 enum_specifier: ENUM IDENTIFIER '{' enumerator_list . '}'
  125 enumerator_list: enumerator_list . ',' enumerator

    ','  shift, and go to state 147
    '}'  shift, and go to state 237


State 146

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  127 enumerator: IDENTIFIER '=' . constant_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 238


State 147

  125 enumerator_list: enumerator_list ',' . enumerator
  126 enumerator: . IDENTIFIER
  127           | . IDENTIFIER '=' constant_expression

    IDENTIFIER  shift, and go to state 63

    enumerator  go to state 239


State 148

  121 enum_specifier: ENUM '{' enumerator_list '}' .

    $default  reduce using rule 121 (enum_specifier)


State 149

   84 init_declarator_list: init_declarator_list ',' init_declarator .

    $default  reduce using rule 84 (init_declarator_list)


State 150

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
  168 initializer: . assignment_expression
  169            | . '{' initializer_list '}'
  169            | '{' . initializer_list '}'
  170            | . '{' initializer_list ',' '}'
  170            | '{' . initializer_list ',' '}'
  171 initializer_list: . initializer
  172                 | . initializer_list ',' initializer

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    '{'             shift, and go to state 150

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 151
    initializer                go to state 240
    initializer_list           go to state 241


State 151

  168 initializer: assignment_expression .

    $default  reduce using rule 168 (initializer)


State 152

   86 init_declarator: declarator '=' initializer .

    $default  reduce using rule 86 (init_declarator)


State 153

  204 function_definition: declaration_specifiers declarator declaration_list compound_statement .

    $default  reduce using rule 204 (function_definition)


State 154

   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  104                          | struct_or_union IDENTIFIER '{' struct_declaration_list . '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  110 struct_declaration_list: struct_declaration_list . struct_declaration
  111 struct_declaration: . specifier_qualifier_list struct_declarator_list ';'
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '}'        shift, and go to state 242

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration         go to state 157
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 155

  112 specifier_qualifier_list: type_specifier specifier_qualifier_list .

    $default  reduce using rule 112 (specifier_qualifier_list)


State 156

  105 struct_or_union_specifier: struct_or_union '{' struct_declaration_list '}' .

    $default  reduce using rule 105 (struct_or_union_specifier)


State 157

  110 struct_declaration_list: struct_declaration_list struct_declaration .

    $default  reduce using rule 110 (struct_declaration_list)


State 158

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  119 struct_declarator: ':' . constant_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 243


State 159

  111 struct_declaration: specifier_qualifier_list struct_declarator_list . ';'
  117 struct_declarator_list: struct_declarator_list . ',' struct_declarator

    ','  shift, and go to state 244
    ';'  shift, and go to state 245


State 160

  116 struct_declarator_list: struct_declarator .

    $default  reduce using rule 116 (struct_declarator_list)


State 161

  118 struct_declarator: declarator .  [',', ';']
  120                  | declarator . ':' constant_expression

    ':'  shift, and go to state 246

    $default  reduce using rule 118 (struct_declarator)


State 162

  114 specifier_qualifier_list: type_qualifier specifier_qualifier_list .

    $default  reduce using rule 114 (specifier_qualifier_list)


State 163

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  178                  | IDENTIFIER ':' . statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 247
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 164

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    4                   | '(' . expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   20                 | SIZEOF '(' . type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  113                         | . type_specifier
  114                         | . type_qualifier specifier_qualifier_list
  115                         | . type_qualifier
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  154 type_name: . specifier_qualifier_list
  155          | . specifier_qualifier_list abstract_declarator

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    TYPE_NAME       shift, and go to state 2
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 179
    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 180
    enum_specifier             go to state 30
    type_qualifier             go to state 79
    type_name                  go to state 248


State 165

   19 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 19 (unary_expression)


State 166

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    4                   | '(' . expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 179


State 167

   16 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 16 (unary_expression)


State 168

   17 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 17 (unary_expression)


State 169

  179 labeled_statement: CASE constant_expression . ':' statement

    ':'  shift, and go to state 249


State 170

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  180                  | DEFAULT ':' . statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 250
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 171

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  192 iteration_statement: WHILE '(' . expression ')' $@1 statement

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 251


State 172

  193 iteration_statement: DO statement . WHILE '(' expression ')' ';'

    WHILE  shift, and go to state 252


State 173

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  189 expression_statement: . ';'
  190                     | . expression ';'
  194 iteration_statement: FOR '(' . expression_statement expression_statement ')' statement
  195                    | FOR '(' . expression_statement expression_statement expression ')' statement

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    expression_statement       go to state 253


State 174

  196 jump_statement: GOTO IDENTIFIER . ';'

    ';'  shift, and go to state 254


State 175

  197 jump_statement: CONTINUE ';' .

    $default  reduce using rule 197 (jump_statement)


State 176

  198 jump_statement: BREAK ';' .

    $default  reduce using rule 198 (jump_statement)


State 177

  199 jump_statement: RETURN ';' .

    $default  reduce using rule 199 (jump_statement)


State 178

   73 expression: expression . ',' assignment_expression
  200 jump_statement: RETURN expression . ';'

    ','  shift, and go to state 220
    ';'  shift, and go to state 255


State 179

    4 primary_expression: '(' expression . ')'
   73 expression: expression . ',' assignment_expression

    ')'  shift, and go to state 256
    ','  shift, and go to state 220


State 180

  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  154 type_name: specifier_qualifier_list .  [')']
  155          | specifier_qualifier_list . abstract_declarator
  156 abstract_declarator: . pointer
  157                    | . direct_abstract_declarator
  158                    | . pointer direct_abstract_declarator
  159 direct_abstract_declarator: . '(' abstract_declarator ')'
  160                           | . '[' ']'
  161                           | . '[' constant_expression ']'
  162                           | . direct_abstract_declarator '[' ']'
  163                           | . direct_abstract_declarator '[' constant_expression ']'
  164                           | . '(' ')'
  165                           | . '(' parameter_type_list ')'
  166                           | . direct_abstract_declarator '(' ')'
  167                           | . direct_abstract_declarator '(' parameter_type_list ')'

    '('  shift, and go to state 257
    '['  shift, and go to state 227
    '*'  shift, and go to state 23

    $default  reduce using rule 154 (type_name)

    pointer                     go to state 258
    abstract_declarator         go to state 259
    direct_abstract_declarator  go to state 231


State 181

   28 cast_expression: '(' type_name . ')' cast_expression

    ')'  shift, and go to state 260


State 182

   10 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 261


State 183

   11 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 11 (postfix_expression)


State 184

   12 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 12 (postfix_expression)


State 185

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    7                   | postfix_expression '(' . ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    8                   | postfix_expression '(' . argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   13 argument_expression_list: . assignment_expression
   14                         | . argument_expression_list ',' assignment_expression
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    ')'             shift, and go to state 262
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    argument_expression_list   go to state 263
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 264


State 186

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    6                   | postfix_expression '[' . expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 265


State 187

    9 postfix_expression: postfix_expression '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 266


State 188

   62 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 62 (assignment_operator)


State 189

   63 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 63 (assignment_operator)


State 190

   64 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 64 (assignment_operator)


State 191

   65 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 65 (assignment_operator)


State 192

   66 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 66 (assignment_operator)


State 193

   67 assignment_operator: LEFT_ASSIGN .

    $default  reduce using rule 67 (assignment_operator)


State 194

   68 assignment_operator: RIGHT_ASSIGN .

    $default  reduce using rule 68 (assignment_operator)


State 195

   69 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 69 (assignment_operator)


State 196

   70 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 70 (assignment_operator)


State 197

   71 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 71 (assignment_operator)


State 198

   61 assignment_operator: '=' .

    $default  reduce using rule 61 (assignment_operator)


State 199

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   60                      | unary_expression assignment_operator . assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 267


State 200

   18 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 18 (unary_expression)


State 201

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   30 multiplicative_expression: multiplicative_expression '*' . cast_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 142
    unary_operator      go to state 107
    cast_expression     go to state 268


State 202

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   31 multiplicative_expression: multiplicative_expression '/' . cast_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 142
    unary_operator      go to state 107
    cast_expression     go to state 269


State 203

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   32 multiplicative_expression: multiplicative_expression '%' . cast_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 142
    unary_operator      go to state 107
    cast_expression     go to state 270


State 204

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   34 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 271


State 205

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   35 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 272


State 206

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   37 shift_expression: shift_expression LEFT_OP . additive_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 273


State 207

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   38 shift_expression: shift_expression RIGHT_OP . additive_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 274


State 208

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   42 relational_expression: relational_expression LE_OP . shift_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 275


State 209

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: relational_expression GE_OP . shift_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 276


State 210

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   40 relational_expression: relational_expression '<' . shift_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 277


State 211

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   41 relational_expression: relational_expression '>' . shift_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 278


State 212

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   45 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 279


State 213

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   46 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 280


State 214

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   48 and_expression: and_expression '&' . equality_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 281


State 215

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   50 exclusive_or_expression: exclusive_or_expression '^' . and_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 282


State 216

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   52 inclusive_or_expression: inclusive_or_expression '|' . exclusive_or_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 283


State 217

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: logical_and_expression AND_OP . inclusive_or_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 284


State 218

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   56 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 285


State 219

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   58                       | logical_or_expression '?' . expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 286


State 220

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   73 expression: expression ',' . assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 287


State 221

  190 expression_statement: expression ';' .

    $default  reduce using rule 190 (expression_statement)


State 222

  183 compound_statement: '{' declaration_list '}' .

    $default  reduce using rule 183 (compound_statement)


State 223

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  184                   | '{' declaration_list statement_list . '}'
  188 statement_list: statement_list . statement
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53
    '}'             shift, and go to state 288

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 225
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 224

  182 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 182 (compound_statement)


State 225

  188 statement_list: statement_list statement .

    $default  reduce using rule 188 (statement_list)


State 226

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  133                  | '(' . declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  145 parameter_type_list: . parameter_list
  146                    | . parameter_list ',' ELLIPSIS
  147 parameter_list: . parameter_declaration
  148               | . parameter_list ',' parameter_declaration
  149 parameter_declaration: . declaration_specifiers declarator
  150                      | . declaration_specifiers abstract_declarator
  151                      | . declaration_specifiers
  156 abstract_declarator: . pointer
  157                    | . direct_abstract_declarator
  158                    | . pointer direct_abstract_declarator
  159 direct_abstract_declarator: . '(' abstract_declarator ')'
  159                           | '(' . abstract_declarator ')'
  160                           | . '[' ']'
  161                           | . '[' constant_expression ']'
  162                           | . direct_abstract_declarator '[' ']'
  163                           | . direct_abstract_declarator '[' constant_expression ']'
  164                           | . '(' ')'
  164                           | '(' . ')'
  165                           | . '(' parameter_type_list ')'
  165                           | '(' . parameter_type_list ')'
  166                           | . direct_abstract_declarator '(' ')'
  167                           | . direct_abstract_declarator '(' parameter_type_list ')'

    IDENTIFIER  shift, and go to state 1
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    '('         shift, and go to state 226
    ')'         shift, and go to state 289
    '['         shift, and go to state 227
    '*'         shift, and go to state 23

    declaration_specifiers      go to state 135
    storage_class_specifier     go to state 26
    type_specifier              go to state 27
    struct_or_union_specifier   go to state 28
    struct_or_union             go to state 29
    enum_specifier              go to state 30
    type_qualifier              go to state 31
    declarator                  go to state 40
    direct_declarator           go to state 33
    pointer                     go to state 229
    parameter_type_list         go to state 290
    parameter_list              go to state 137
    parameter_declaration       go to state 138
    abstract_declarator         go to state 291
    direct_abstract_declarator  go to state 231


State 227

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  160 direct_abstract_declarator: '[' . ']'
  161                           | '[' . constant_expression ']'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    ']'             shift, and go to state 292
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 293


State 228

  149 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 149 (parameter_declaration)


State 229

  130 declarator: pointer . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  156 abstract_declarator: pointer .  [')', ',']
  158                    | pointer . direct_abstract_declarator
  159 direct_abstract_declarator: . '(' abstract_declarator ')'
  160                           | . '[' ']'
  161                           | . '[' constant_expression ']'
  162                           | . direct_abstract_declarator '[' ']'
  163                           | . direct_abstract_declarator '[' constant_expression ']'
  164                           | . '(' ')'
  165                           | . '(' parameter_type_list ')'
  166                           | . direct_abstract_declarator '(' ')'
  167                           | . direct_abstract_declarator '(' parameter_type_list ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 226
    '['         shift, and go to state 227

    $default  reduce using rule 156 (abstract_declarator)

    direct_declarator           go to state 60
    direct_abstract_declarator  go to state 294


State 230

  150 parameter_declaration: declaration_specifiers abstract_declarator .

    $default  reduce using rule 150 (parameter_declaration)


State 231

  157 abstract_declarator: direct_abstract_declarator .  [')', ',']
  162 direct_abstract_declarator: direct_abstract_declarator . '[' ']'
  163                           | direct_abstract_declarator . '[' constant_expression ']'
  166                           | direct_abstract_declarator . '(' ')'
  167                           | direct_abstract_declarator . '(' parameter_type_list ')'

    '('  shift, and go to state 295
    '['  shift, and go to state 296

    $default  reduce using rule 157 (abstract_declarator)


State 232

  136 direct_declarator: direct_declarator '(' parameter_type_list ')' .

    $default  reduce using rule 136 (direct_declarator)


State 233

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  146 parameter_type_list: parameter_list ',' . ELLIPSIS
  148 parameter_list: parameter_list ',' . parameter_declaration
  149 parameter_declaration: . declaration_specifiers declarator
  150                      | . declaration_specifiers abstract_declarator
  151                      | . declaration_specifiers

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    ELLIPSIS   shift, and go to state 297

    declaration_specifiers     go to state 135
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    parameter_declaration      go to state 298


State 234

  137 direct_declarator: direct_declarator '(' identifier_list ')' .

    $default  reduce using rule 137 (direct_declarator)


State 235

  153 identifier_list: identifier_list ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 299


State 236

  134 direct_declarator: direct_declarator '[' constant_expression ']' .

    $default  reduce using rule 134 (direct_declarator)


State 237

  122 enum_specifier: ENUM IDENTIFIER '{' enumerator_list '}' .

    $default  reduce using rule 122 (enum_specifier)


State 238

  127 enumerator: IDENTIFIER '=' constant_expression .

    $default  reduce using rule 127 (enumerator)


State 239

  125 enumerator_list: enumerator_list ',' enumerator .

    $default  reduce using rule 125 (enumerator_list)


State 240

  171 initializer_list: initializer .

    $default  reduce using rule 171 (initializer_list)


State 241

  169 initializer: '{' initializer_list . '}'
  170            | '{' initializer_list . ',' '}'
  172 initializer_list: initializer_list . ',' initializer

    ','  shift, and go to state 300
    '}'  shift, and go to state 301


State 242

  104 struct_or_union_specifier: struct_or_union IDENTIFIER '{' struct_declaration_list '}' .

    $default  reduce using rule 104 (struct_or_union_specifier)


State 243

  119 struct_declarator: ':' constant_expression .

    $default  reduce using rule 119 (struct_declarator)


State 244

  117 struct_declarator_list: struct_declarator_list ',' . struct_declarator
  118 struct_declarator: . declarator
  119                  | . ':' constant_expression
  120                  | . declarator ':' constant_expression
  130 declarator: . pointer direct_declarator
  131           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . '(' declarator ')'
  134                  | . direct_declarator '[' constant_expression ']'
  135                  | . direct_declarator '[' ']'
  136                  | . direct_declarator '(' parameter_type_list ')'
  137                  | . direct_declarator '(' identifier_list ')'
  138                  | . direct_declarator '(' ')'
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ':'         shift, and go to state 158

    struct_declarator  go to state 302
    declarator         go to state 161
    direct_declarator  go to state 33
    pointer            go to state 34


State 245

  111 struct_declaration: specifier_qualifier_list struct_declarator_list ';' .

    $default  reduce using rule 111 (struct_declaration)


State 246

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  120 struct_declarator: declarator ':' . constant_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 303


State 247

  178 labeled_statement: IDENTIFIER ':' statement .

    $default  reduce using rule 178 (labeled_statement)


State 248

   20 unary_expression: SIZEOF '(' type_name . ')'

    ')'  shift, and go to state 304


State 249

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  179                  | CASE constant_expression ':' . statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 305
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 250

  180 labeled_statement: DEFAULT ':' statement .

    $default  reduce using rule 180 (labeled_statement)


State 251

   73 expression: expression . ',' assignment_expression
  192 iteration_statement: WHILE '(' expression . ')' $@1 statement

    ')'  shift, and go to state 306
    ','  shift, and go to state 220


State 252

  193 iteration_statement: DO statement WHILE . '(' expression ')' ';'

    '('  shift, and go to state 307


State 253

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  189 expression_statement: . ';'
  190                     | . expression ';'
  194 iteration_statement: FOR '(' expression_statement . expression_statement ')' statement
  195                    | FOR '(' expression_statement . expression_statement expression ')' statement

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    expression_statement       go to state 308


State 254

  196 jump_statement: GOTO IDENTIFIER ';' .

    $default  reduce using rule 196 (jump_statement)


State 255

  200 jump_statement: RETURN expression ';' .

    $default  reduce using rule 200 (jump_statement)


State 256

    4 primary_expression: '(' expression ')' .

    $default  reduce using rule 4 (primary_expression)


State 257

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  139 pointer: . '*'
  140        | . '*' type_qualifier_list
  141        | . '*' pointer
  142        | . '*' type_qualifier_list pointer
  145 parameter_type_list: . parameter_list
  146                    | . parameter_list ',' ELLIPSIS
  147 parameter_list: . parameter_declaration
  148               | . parameter_list ',' parameter_declaration
  149 parameter_declaration: . declaration_specifiers declarator
  150                      | . declaration_specifiers abstract_declarator
  151                      | . declaration_specifiers
  156 abstract_declarator: . pointer
  157                    | . direct_abstract_declarator
  158                    | . pointer direct_abstract_declarator
  159 direct_abstract_declarator: . '(' abstract_declarator ')'
  159                           | '(' . abstract_declarator ')'
  160                           | . '[' ']'
  161                           | . '[' constant_expression ']'
  162                           | . direct_abstract_declarator '[' ']'
  163                           | . direct_abstract_declarator '[' constant_expression ']'
  164                           | . '(' ')'
  164                           | '(' . ')'
  165                           | . '(' parameter_type_list ')'
  165                           | '(' . parameter_type_list ')'
  166                           | . direct_abstract_declarator '(' ')'
  167                           | . direct_abstract_declarator '(' parameter_type_list ')'

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '('        shift, and go to state 257
    ')'        shift, and go to state 289
    '['        shift, and go to state 227
    '*'        shift, and go to state 23

    declaration_specifiers      go to state 135
    storage_class_specifier     go to state 26
    type_specifier              go to state 27
    struct_or_union_specifier   go to state 28
    struct_or_union             go to state 29
    enum_specifier              go to state 30
    type_qualifier              go to state 31
    pointer                     go to state 258
    parameter_type_list         go to state 290
    parameter_list              go to state 137
    parameter_declaration       go to state 138
    abstract_declarator         go to state 291
    direct_abstract_declarator  go to state 231


State 258

  156 abstract_declarator: pointer .  [')']
  158                    | pointer . direct_abstract_declarator
  159 direct_abstract_declarator: . '(' abstract_declarator ')'
  160                           | . '[' ']'
  161                           | . '[' constant_expression ']'
  162                           | . direct_abstract_declarator '[' ']'
  163                           | . direct_abstract_declarator '[' constant_expression ']'
  164                           | . '(' ')'
  165                           | . '(' parameter_type_list ')'
  166                           | . direct_abstract_declarator '(' ')'
  167                           | . direct_abstract_declarator '(' parameter_type_list ')'

    '('  shift, and go to state 257
    '['  shift, and go to state 227

    $default  reduce using rule 156 (abstract_declarator)

    direct_abstract_declarator  go to state 294


State 259

  155 type_name: specifier_qualifier_list abstract_declarator .

    $default  reduce using rule 155 (type_name)


State 260

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   28                | '(' type_name ')' . cast_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression  go to state 104
    postfix_expression  go to state 105
    unary_expression    go to state 142
    unary_operator      go to state 107
    cast_expression     go to state 309


State 261

   10 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 10 (postfix_expression)


State 262

    7 postfix_expression: postfix_expression '(' ')' .

    $default  reduce using rule 7 (postfix_expression)


State 263

    8 postfix_expression: postfix_expression '(' argument_expression_list . ')'
   14 argument_expression_list: argument_expression_list . ',' assignment_expression

    ')'  shift, and go to state 310
    ','  shift, and go to state 311


State 264

   13 argument_expression_list: assignment_expression .

    $default  reduce using rule 13 (argument_expression_list)


State 265

    6 postfix_expression: postfix_expression '[' expression . ']'
   73 expression: expression . ',' assignment_expression

    ']'  shift, and go to state 312
    ','  shift, and go to state 220


State 266

    9 postfix_expression: postfix_expression '.' IDENTIFIER .

    $default  reduce using rule 9 (postfix_expression)


State 267

   60 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 60 (assignment_expression)


State 268

   30 multiplicative_expression: multiplicative_expression '*' cast_expression .

    $default  reduce using rule 30 (multiplicative_expression)


State 269

   31 multiplicative_expression: multiplicative_expression '/' cast_expression .

    $default  reduce using rule 31 (multiplicative_expression)


State 270

   32 multiplicative_expression: multiplicative_expression '%' cast_expression .

    $default  reduce using rule 32 (multiplicative_expression)


State 271

   30 multiplicative_expression: multiplicative_expression . '*' cast_expression
   31                          | multiplicative_expression . '/' cast_expression
   32                          | multiplicative_expression . '%' cast_expression
   34 additive_expression: additive_expression '+' multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':', ';', '}']

    '*'  shift, and go to state 201
    '/'  shift, and go to state 202
    '%'  shift, and go to state 203

    $default  reduce using rule 34 (additive_expression)


State 272

   30 multiplicative_expression: multiplicative_expression . '*' cast_expression
   31                          | multiplicative_expression . '/' cast_expression
   32                          | multiplicative_expression . '%' cast_expression
   35 additive_expression: additive_expression '-' multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':', ';', '}']

    '*'  shift, and go to state 201
    '/'  shift, and go to state 202
    '%'  shift, and go to state 203

    $default  reduce using rule 35 (additive_expression)


State 273

   34 additive_expression: additive_expression . '+' multiplicative_expression
   35                    | additive_expression . '-' multiplicative_expression
   37 shift_expression: shift_expression LEFT_OP additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    '+'  shift, and go to state 204
    '-'  shift, and go to state 205

    $default  reduce using rule 37 (shift_expression)


State 274

   34 additive_expression: additive_expression . '+' multiplicative_expression
   35                    | additive_expression . '-' multiplicative_expression
   38 shift_expression: shift_expression RIGHT_OP additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    '+'  shift, and go to state 204
    '-'  shift, and go to state 205

    $default  reduce using rule 38 (shift_expression)


State 275

   37 shift_expression: shift_expression . LEFT_OP additive_expression
   38                 | shift_expression . RIGHT_OP additive_expression
   42 relational_expression: relational_expression LE_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 206
    RIGHT_OP  shift, and go to state 207

    $default  reduce using rule 42 (relational_expression)


State 276

   37 shift_expression: shift_expression . LEFT_OP additive_expression
   38                 | shift_expression . RIGHT_OP additive_expression
   43 relational_expression: relational_expression GE_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 206
    RIGHT_OP  shift, and go to state 207

    $default  reduce using rule 43 (relational_expression)


State 277

   37 shift_expression: shift_expression . LEFT_OP additive_expression
   38                 | shift_expression . RIGHT_OP additive_expression
   40 relational_expression: relational_expression '<' shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 206
    RIGHT_OP  shift, and go to state 207

    $default  reduce using rule 40 (relational_expression)


State 278

   37 shift_expression: shift_expression . LEFT_OP additive_expression
   38                 | shift_expression . RIGHT_OP additive_expression
   41 relational_expression: relational_expression '>' shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 206
    RIGHT_OP  shift, and go to state 207

    $default  reduce using rule 41 (relational_expression)


State 279

   40 relational_expression: relational_expression . '<' shift_expression
   41                      | relational_expression . '>' shift_expression
   42                      | relational_expression . LE_OP shift_expression
   43                      | relational_expression . GE_OP shift_expression
   45 equality_expression: equality_expression EQ_OP relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    LE_OP  shift, and go to state 208
    GE_OP  shift, and go to state 209
    '<'    shift, and go to state 210
    '>'    shift, and go to state 211

    $default  reduce using rule 45 (equality_expression)


State 280

   40 relational_expression: relational_expression . '<' shift_expression
   41                      | relational_expression . '>' shift_expression
   42                      | relational_expression . LE_OP shift_expression
   43                      | relational_expression . GE_OP shift_expression
   46 equality_expression: equality_expression NE_OP relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    LE_OP  shift, and go to state 208
    GE_OP  shift, and go to state 209
    '<'    shift, and go to state 210
    '>'    shift, and go to state 211

    $default  reduce using rule 46 (equality_expression)


State 281

   45 equality_expression: equality_expression . EQ_OP relational_expression
   46                    | equality_expression . NE_OP relational_expression
   48 and_expression: and_expression '&' equality_expression .  [AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    EQ_OP  shift, and go to state 212
    NE_OP  shift, and go to state 213

    $default  reduce using rule 48 (and_expression)


State 282

   48 and_expression: and_expression . '&' equality_expression
   50 exclusive_or_expression: exclusive_or_expression '^' and_expression .  [AND_OP, OR_OP, ')', ']', ',', '^', '|', '?', ':', ';', '}']

    '&'  shift, and go to state 214

    $default  reduce using rule 50 (exclusive_or_expression)


State 283

   50 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   52 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', '|', '?', ':', ';', '}']

    '^'  shift, and go to state 215

    $default  reduce using rule 52 (inclusive_or_expression)


State 284

   52 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   54 logical_and_expression: logical_and_expression AND_OP inclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', '?', ':', ';', '}']

    '|'  shift, and go to state 216

    $default  reduce using rule 54 (logical_and_expression)


State 285

   54 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   56 logical_or_expression: logical_or_expression OR_OP logical_and_expression .  [OR_OP, ')', ']', ',', '?', ':', ';', '}']

    AND_OP  shift, and go to state 217

    $default  reduce using rule 56 (logical_or_expression)


State 286

   58 conditional_expression: logical_or_expression '?' expression . ':' conditional_expression
   73 expression: expression . ',' assignment_expression

    ','  shift, and go to state 220
    ':'  shift, and go to state 313


State 287

   73 expression: expression ',' assignment_expression .

    $default  reduce using rule 73 (expression)


State 288

  184 compound_statement: '{' declaration_list statement_list '}' .

    $default  reduce using rule 184 (compound_statement)


State 289

  164 direct_abstract_declarator: '(' ')' .

    $default  reduce using rule 164 (direct_abstract_declarator)


State 290

  165 direct_abstract_declarator: '(' parameter_type_list . ')'

    ')'  shift, and go to state 314


State 291

  159 direct_abstract_declarator: '(' abstract_declarator . ')'

    ')'  shift, and go to state 315


State 292

  160 direct_abstract_declarator: '[' ']' .

    $default  reduce using rule 160 (direct_abstract_declarator)


State 293

  161 direct_abstract_declarator: '[' constant_expression . ']'

    ']'  shift, and go to state 316


State 294

  158 abstract_declarator: pointer direct_abstract_declarator .  [')', ',']
  162 direct_abstract_declarator: direct_abstract_declarator . '[' ']'
  163                           | direct_abstract_declarator . '[' constant_expression ']'
  166                           | direct_abstract_declarator . '(' ')'
  167                           | direct_abstract_declarator . '(' parameter_type_list ')'

    '('  shift, and go to state 295
    '['  shift, and go to state 296

    $default  reduce using rule 158 (abstract_declarator)


State 295

   77 declaration_specifiers: . storage_class_specifier
   78                       | . storage_class_specifier declaration_specifiers
   79                       | . type_specifier
   80                       | . type_specifier declaration_specifiers
   81                       | . type_qualifier
   82                       | . type_qualifier declaration_specifiers
   87 storage_class_specifier: . TYPEDEF
   88                        | . EXTERN
   89                        | . STATIC
   90                        | . AUTO
   91                        | . REGISTER
   92 type_specifier: . VOID
   93               | . CHAR
   94               | . SHORT
   95               | . INT
   96               | . LONG
   97               | . FLOAT
   98               | . DOUBLE
   99               | . SIGNED
  100               | . UNSIGNED
  101               | . struct_or_union_specifier
  102               | . enum_specifier
  103               | . TYPE_NAME
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union '{' struct_declaration_list '}'
  106                          | . struct_or_union IDENTIFIER
  107 struct_or_union: . STRUCT
  108                | . UNION
  121 enum_specifier: . ENUM '{' enumerator_list '}'
  122               | . ENUM IDENTIFIER '{' enumerator_list '}'
  123               | . ENUM IDENTIFIER
  128 type_qualifier: . CONST
  129               | . VOLATILE
  145 parameter_type_list: . parameter_list
  146                    | . parameter_list ',' ELLIPSIS
  147 parameter_list: . parameter_declaration
  148               | . parameter_list ',' parameter_declaration
  149 parameter_declaration: . declaration_specifiers declarator
  150                      | . declaration_specifiers abstract_declarator
  151                      | . declaration_specifiers
  166 direct_abstract_declarator: direct_abstract_declarator '(' . ')'
  167                           | direct_abstract_declarator '(' . parameter_type_list ')'

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    ')'        shift, and go to state 317

    declaration_specifiers     go to state 135
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    parameter_type_list        go to state 318
    parameter_list             go to state 137
    parameter_declaration      go to state 138


State 296

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   74 constant_expression: . conditional_expression
  162 direct_abstract_declarator: direct_abstract_declarator '[' . ']'
  163                           | direct_abstract_declarator '[' . constant_expression ']'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    ']'             shift, and go to state 319
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 143
    constant_expression        go to state 320


State 297

  146 parameter_type_list: parameter_list ',' ELLIPSIS .

    $default  reduce using rule 146 (parameter_type_list)


State 298

  148 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 148 (parameter_list)


State 299

  153 identifier_list: identifier_list ',' IDENTIFIER .

    $default  reduce using rule 153 (identifier_list)


State 300

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
  168 initializer: . assignment_expression
  169            | . '{' initializer_list '}'
  170            | . '{' initializer_list ',' '}'
  170            | '{' initializer_list ',' . '}'
  172 initializer_list: initializer_list ',' . initializer

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    '{'             shift, and go to state 150
    '}'             shift, and go to state 321

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 151
    initializer                go to state 322


State 301

  169 initializer: '{' initializer_list '}' .

    $default  reduce using rule 169 (initializer)


State 302

  117 struct_declarator_list: struct_declarator_list ',' struct_declarator .

    $default  reduce using rule 117 (struct_declarator_list)


State 303

  120 struct_declarator: declarator ':' constant_expression .

    $default  reduce using rule 120 (struct_declarator)


State 304

   20 unary_expression: SIZEOF '(' type_name ')' .

    $default  reduce using rule 20 (unary_expression)


State 305

  179 labeled_statement: CASE constant_expression ':' statement .

    $default  reduce using rule 179 (labeled_statement)


State 306

  191 $@1: .
  192 iteration_statement: WHILE '(' expression ')' . $@1 statement

    $default  reduce using rule 191 ($@1)

    $@1  go to state 323


State 307

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  193 iteration_statement: DO statement WHILE '(' . expression ')' ';'

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 324


State 308

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  194 iteration_statement: FOR '(' expression_statement expression_statement . ')' statement
  195                    | FOR '(' expression_statement expression_statement . expression ')' statement

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    ')'             shift, and go to state 325
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 326


State 309

   28 cast_expression: '(' type_name ')' cast_expression .

    $default  reduce using rule 28 (cast_expression)


State 310

    8 postfix_expression: postfix_expression '(' argument_expression_list ')' .

    $default  reduce using rule 8 (postfix_expression)


State 311

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   14 argument_expression_list: argument_expression_list ',' . assignment_expression
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 327


State 312

    6 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 6 (postfix_expression)


State 313

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   58                       | logical_or_expression '?' expression ':' . conditional_expression

    IDENTIFIER      shift, and go to state 140
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 142
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 328


State 314

  165 direct_abstract_declarator: '(' parameter_type_list ')' .

    $default  reduce using rule 165 (direct_abstract_declarator)


State 315

  159 direct_abstract_declarator: '(' abstract_declarator ')' .

    $default  reduce using rule 159 (direct_abstract_declarator)


State 316

  161 direct_abstract_declarator: '[' constant_expression ']' .

    $default  reduce using rule 161 (direct_abstract_declarator)


State 317

  166 direct_abstract_declarator: direct_abstract_declarator '(' ')' .

    $default  reduce using rule 166 (direct_abstract_declarator)


State 318

  167 direct_abstract_declarator: direct_abstract_declarator '(' parameter_type_list . ')'

    ')'  shift, and go to state 329


State 319

  162 direct_abstract_declarator: direct_abstract_declarator '[' ']' .

    $default  reduce using rule 162 (direct_abstract_declarator)


State 320

  163 direct_abstract_declarator: direct_abstract_declarator '[' constant_expression . ']'

    ']'  shift, and go to state 330


State 321

  170 initializer: '{' initializer_list ',' '}' .

    $default  reduce using rule 170 (initializer)


State 322

  172 initializer_list: initializer_list ',' initializer .

    $default  reduce using rule 172 (initializer_list)


State 323

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  192                    | WHILE '(' expression ')' $@1 . statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 331
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 324

   73 expression: expression . ',' assignment_expression
  193 iteration_statement: DO statement WHILE '(' expression . ')' ';'

    ')'  shift, and go to state 332
    ','  shift, and go to state 220


State 325

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  194                    | FOR '(' expression_statement expression_statement ')' . statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 333
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 326

   73 expression: expression . ',' assignment_expression
  195 iteration_statement: FOR '(' expression_statement expression_statement expression . ')' statement

    ')'  shift, and go to state 334
    ','  shift, and go to state 220


State 327

   14 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 14 (argument_expression_list)


State 328

   58 conditional_expression: logical_or_expression '?' expression ':' conditional_expression .

    $default  reduce using rule 58 (conditional_expression)


State 329

  167 direct_abstract_declarator: direct_abstract_declarator '(' parameter_type_list ')' .

    $default  reduce using rule 167 (direct_abstract_declarator)


State 330

  163 direct_abstract_declarator: direct_abstract_declarator '[' constant_expression ']' .

    $default  reduce using rule 163 (direct_abstract_declarator)


State 331

  192 iteration_statement: WHILE '(' expression ')' $@1 statement .

    $default  reduce using rule 192 (iteration_statement)


State 332

  193 iteration_statement: DO statement WHILE '(' expression ')' . ';'

    ';'  shift, and go to state 335


State 333

  194 iteration_statement: FOR '(' expression_statement expression_statement ')' statement .

    $default  reduce using rule 194 (iteration_statement)


State 334

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3                   | . STRING_LITERAL
    4                   | . '(' expression ')'
    5 postfix_expression: . primary_expression
    6                   | . postfix_expression '[' expression ']'
    7                   | . postfix_expression '(' ')'
    8                   | . postfix_expression '(' argument_expression_list ')'
    9                   | . postfix_expression '.' IDENTIFIER
   10                   | . postfix_expression PTR_OP IDENTIFIER
   11                   | . postfix_expression INC_OP
   12                   | . postfix_expression DEC_OP
   15 unary_expression: . postfix_expression
   16                 | . INC_OP unary_expression
   17                 | . DEC_OP unary_expression
   18                 | . unary_operator cast_expression
   19                 | . SIZEOF unary_expression
   20                 | . SIZEOF '(' type_name ')'
   21 unary_operator: . '&'
   22               | . '*'
   23               | . '+'
   24               | . '-'
   25               | . '~'
   26               | . '!'
   27 cast_expression: . unary_expression
   28                | . '(' type_name ')' cast_expression
   29 multiplicative_expression: . cast_expression
   30                          | . multiplicative_expression '*' cast_expression
   31                          | . multiplicative_expression '/' cast_expression
   32                          | . multiplicative_expression '%' cast_expression
   33 additive_expression: . multiplicative_expression
   34                    | . additive_expression '+' multiplicative_expression
   35                    | . additive_expression '-' multiplicative_expression
   36 shift_expression: . additive_expression
   37                 | . shift_expression LEFT_OP additive_expression
   38                 | . shift_expression RIGHT_OP additive_expression
   39 relational_expression: . shift_expression
   40                      | . relational_expression '<' shift_expression
   41                      | . relational_expression '>' shift_expression
   42                      | . relational_expression LE_OP shift_expression
   43                      | . relational_expression GE_OP shift_expression
   44 equality_expression: . relational_expression
   45                    | . equality_expression EQ_OP relational_expression
   46                    | . equality_expression NE_OP relational_expression
   47 and_expression: . equality_expression
   48               | . and_expression '&' equality_expression
   49 exclusive_or_expression: . and_expression
   50                        | . exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: . exclusive_or_expression
   52                        | . inclusive_or_expression '|' exclusive_or_expression
   53 logical_and_expression: . inclusive_or_expression
   54                       | . logical_and_expression AND_OP inclusive_or_expression
   55 logical_or_expression: . logical_and_expression
   56                      | . logical_or_expression OR_OP logical_and_expression
   57 conditional_expression: . logical_or_expression
   58                       | . logical_or_expression '?' expression ':' conditional_expression
   59 assignment_expression: . conditional_expression
   60                      | . unary_expression assignment_operator assignment_expression
   72 expression: . assignment_expression
   73           | . expression ',' assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . iteration_statement
  177          | . jump_statement
  178 labeled_statement: . IDENTIFIER ':' statement
  179                  | . CASE constant_expression ':' statement
  180                  | . DEFAULT ':' statement
  181 compound_statement: . '{' '}'
  182                   | . '{' statement_list '}'
  183                   | . '{' declaration_list '}'
  184                   | . '{' declaration_list statement_list '}'
  189 expression_statement: . ';'
  190                     | . expression ';'
  192 iteration_statement: . WHILE '(' expression ')' $@1 statement
  193                    | . DO statement WHILE '(' expression ')' ';'
  194                    | . FOR '(' expression_statement expression_statement ')' statement
  195                    | . FOR '(' expression_statement expression_statement expression ')' statement
  195                    | FOR '(' expression_statement expression_statement expression ')' . statement
  196 jump_statement: . GOTO IDENTIFIER ';'
  197               | . CONTINUE ';'
  198               | . BREAK ';'
  199               | . RETURN ';'
  200               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 80
    CONSTANT        shift, and go to state 81
    STRING_LITERAL  shift, and go to state 82
    SIZEOF          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    CASE            shift, and go to state 86
    DEFAULT         shift, and go to state 87
    WHILE           shift, and go to state 88
    DO              shift, and go to state 89
    FOR             shift, and go to state 90
    GOTO            shift, and go to state 91
    CONTINUE        shift, and go to state 92
    BREAK           shift, and go to state 93
    RETURN          shift, and go to state 94
    '('             shift, and go to state 95
    '&'             shift, and go to state 96
    '*'             shift, and go to state 97
    '+'             shift, and go to state 98
    '-'             shift, and go to state 99
    '~'             shift, and go to state 100
    '!'             shift, and go to state 101
    ';'             shift, and go to state 102
    '{'             shift, and go to state 53

    primary_expression         go to state 104
    postfix_expression         go to state 105
    unary_expression           go to state 106
    unary_operator             go to state 107
    cast_expression            go to state 108
    multiplicative_expression  go to state 109
    additive_expression        go to state 110
    shift_expression           go to state 111
    relational_expression      go to state 112
    equality_expression        go to state 113
    and_expression             go to state 114
    exclusive_or_expression    go to state 115
    inclusive_or_expression    go to state 116
    logical_and_expression     go to state 117
    logical_or_expression      go to state 118
    conditional_expression     go to state 119
    assignment_expression      go to state 120
    expression                 go to state 121
    statement                  go to state 336
    labeled_statement          go to state 123
    compound_statement         go to state 124
    expression_statement       go to state 127
    iteration_statement        go to state 128
    jump_statement             go to state 129


State 335

  193 iteration_statement: DO statement WHILE '(' expression ')' ';' .

    $default  reduce using rule 193 (iteration_statement)


State 336

  195 iteration_statement: FOR '(' expression_statement expression_statement expression ')' statement .

    $default  reduce using rule 195 (iteration_statement)
